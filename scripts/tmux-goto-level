#!/bin/bash
# tmux-goto-level - Navigate to specific level in 3-level system
# Usage: tmux-goto-level <1|2|3>

set -euo pipefail

show_error() {
    echo "‚ùå $1" >&2
    # Clear any status styling
    tmux set-option -u status-style 2>/dev/null || true
}

# Input validation
validate_level() {
    case "$1" in
        1|2|3) return 0 ;;
        *) return 1 ;;
    esac
}

# Session detection function
detect_session_level() {
    local session_name="${1:-$(tmux display-message -p '#S' 2>/dev/null || echo '')}"
    if [[ -z "$session_name" ]]; then
        echo "1"
        return
    fi
    
    local level
    level=$(tmux show-option -t "$session_name" @session_level 2>/dev/null | cut -d' ' -f2 || echo "1")
    echo "$level"
}

# Main function - implements manual re-evaluation for 3-level system
main() {
    if [[ $# -ne 1 ]]; then
        show_error "Usage: tmux-goto-level <1|2|3>"
        exit 1
    fi

    local target_level="$1"
    
    if ! validate_level "$target_level"; then
        show_error "Level must be 1, 2, or 3, got '$target_level'"
        exit 1
    fi
    
    echo "üîÑ Navigating to Level $target_level..."
    
    # Step 1: Update global navigation state
    if ! tmux set-option -g @active_level "$target_level" 2>/dev/null; then
        show_error "Failed to set global active level"
        exit 1
    fi
    
    # Step 2: Manual re-evaluation of ALL sessions
    local activated_count=0
    local passthrough_count=0
    
    # Process each session
    while IFS= read -r session_name; do
        # Skip if session_name is empty
        [[ -n "$session_name" ]] || continue
        
        # Get this session's level identity
        local session_level
        session_level=$(detect_session_level "$session_name")
        
        if [[ $session_level -eq $target_level ]]; then
            # ACTIVATE: This session should respond to tmux commands
            if tmux set-option -t "$session_name" prefix C-x 2>/dev/null && \
               tmux set-option -t "$session_name" key-table root 2>/dev/null; then
                echo "‚úÖ ACTIVATED: $session_name (Level $session_level)"
                ((activated_count++))
            else
                echo "‚ö†Ô∏è  Warning: Failed to activate session $session_name"
            fi
        else
            # PASSTHROUGH: This session should be transparent
            if tmux set-option -t "$session_name" prefix None 2>/dev/null && \
               tmux set-option -t "$session_name" key-table off 2>/dev/null; then
                echo "üîÄ PASSTHROUGH: $session_name (Level $session_level)"
                ((passthrough_count++))
            else
                echo "‚ö†Ô∏è  Warning: Failed to set passthrough for session $session_name"
            fi
        fi
    done < <(tmux list-sessions -F '#S' 2>/dev/null || true)
    
    # Step 3: Provide feedback
    if [[ $activated_count -eq 0 ]]; then
        echo "üìù No Level $target_level sessions found. Create one with: tmux-start-level $target_level"
    else
        echo "üéØ Level $target_level Navigation Active ($activated_count sessions active, $passthrough_count passthrough)"
    fi
    
    # Step 4: Visual confirmation and refresh
    tmux display-message "Level $target_level Active ($activated_count sessions)" 2>/dev/null || true
    tmux refresh-client -S 2>/dev/null || true
    
    # Step 5: Save state for persistence
    echo "$target_level" > ~/.tmux_level_state 2>/dev/null || true
}

# Run main function
main "$@"