#!/bin/bash
# Delightful Multilevel Tmux - Configurable Installer
# Allows customization of prefix keys and installs multilevel tmux scripts

set -e

echo "🚀 Installing Delightful Multilevel Tmux..."

# Check if tmux is installed
if ! command -v tmux &> /dev/null; then
    echo "❌ tmux is not installed. Please install tmux first."
    exit 1
fi

# Check tmux version (need 2.1+)
TMUX_VERSION=$(tmux -V | cut -d' ' -f2 | tr -d '[:alpha:]')
if [[ $(echo "$TMUX_VERSION 2.1" | tr " " "\n" | sort -V | head -n1) != "2.1" ]]; then
    echo "⚠️  tmux version $TMUX_VERSION detected. Version 2.1+ recommended for full functionality."
fi

# Function to validate tmux key format
validate_tmux_key() {
    local key="$1"
    # Check for common tmux key formats: C-x, M-x, F1-F12, etc.
    if [[ "$key" =~ ^(C-[a-z]|M-[a-z]|F[1-9]|F1[0-2])$ ]]; then
        return 0
    else
        return 1
    fi
}

# Configure prefix keys
echo ""
echo "📋 Configure your prefix keys:"
echo "   The primary prefix is used when a session is active at its level"
echo "   The secondary prefix is used for passthrough (inactive sessions)"
echo ""

# Primary prefix
while true; do
    read -p "Enter primary prefix key (default: C-x): " primary_prefix
    primary_prefix=${primary_prefix:-C-x}
    
    if validate_tmux_key "$primary_prefix"; then
        break
    else
        echo "❌ Invalid key format. Use format like C-x, M-x, or F1"
    fi
done

# Secondary prefix
while true; do
    read -p "Enter secondary prefix key (default: C-a): " secondary_prefix
    secondary_prefix=${secondary_prefix:-C-a}
    
    if validate_tmux_key "$secondary_prefix"; then
        if [[ "$secondary_prefix" == "$primary_prefix" ]]; then
            echo "❌ Secondary prefix must be different from primary prefix"
        else
            break
        fi
    else
        echo "❌ Invalid key format. Use format like C-x, M-x, or F1"
    fi
done

# Warnings for common conflicts
if [[ "$primary_prefix" == "C-b" ]] || [[ "$secondary_prefix" == "C-b" ]]; then
    echo "⚠️  Warning: C-b is the default tmux prefix. This may conflict with standard tmux."
fi

if [[ "$primary_prefix" == "C-a" ]]; then
    echo "⚠️  Note: C-a is commonly used by GNU screen."
fi

echo ""
echo "✅ Configuration:"
echo "   Primary prefix:   $primary_prefix (for active sessions)"
echo "   Secondary prefix: $secondary_prefix (for passthrough)"

# Create scripts directory structure
echo ""
echo "📁 Creating ~/.local/bin/tmux-multilevel/ structure..."
mkdir -p ~/.local/bin/tmux-multilevel/core
mkdir -p ~/.local/bin/tmux-multilevel/utility

# Create configuration file
echo "📝 Creating configuration file..."
cat > ~/.local/bin/tmux-multilevel/config.sh << EOF
#!/bin/bash
# Delightful Multilevel Tmux Configuration
# Generated by install.sh on $(date)

# Prefix key configuration
export PRIMARY_PREFIX="$primary_prefix"
export SECONDARY_PREFIX="$secondary_prefix"

# You can manually edit these values if needed
# After editing, regenerate tmux.conf.generated and reload tmux
EOF

chmod +x ~/.local/bin/tmux-multilevel/config.sh

# Copy core scripts
echo "📋 Copying core scripts..."
cp scripts/core/* ~/.local/bin/tmux-multilevel/core/
chmod +x ~/.local/bin/tmux-multilevel/core/*

# Copy utility scripts
echo "📋 Copying utility scripts..."
cp scripts/utility/* ~/.local/bin/tmux-multilevel/utility/
chmod +x ~/.local/bin/tmux-multilevel/utility/*

# Create symlinks for all scripts
echo "🔗 Creating symlinks for direct access..."
for script in ~/.local/bin/tmux-multilevel/{core,utility}/*; do
    [ -f "$script" ] || continue
    basename=$(basename "$script")
    # Get relative path from tmux-multilevel directory
    relpath=${script#~/.local/bin/tmux-multilevel/}
    # Symlink in tmux-multilevel main directory (backward compatibility)
    ln -sf "$relpath" ~/.local/bin/tmux-multilevel/"$basename"
    # Symlink in ~/.local/bin for direct access
    ln -sf "tmux-multilevel/$relpath" ~/.local/bin/"$basename"
done

# Generate tmux.conf with user's chosen prefixes
echo "📄 Generating tmux.conf.generated with your configuration..."
cat > tmux.conf.generated << EOF
# ╔══════════════════════════════════════════════════════════════════════════╗
# ║                    DELIGHTFUL MULTILEVEL TMUX (DMT)                       ║
# ║                  Generated Configuration File v2.0                        ║
# ║                                                                           ║
# ║  "One tmux to rule them all, nine levels to bind them"                   ║
# ║                                                                           ║
# ║  Primary Prefix:   $primary_prefix                                              ║
# ║  Secondary Prefix: $secondary_prefix                                              ║
# ╚══════════════════════════════════════════════════════════════════════════╝

# ┌──────────────────────────────────────────────────────────────────────────┐
# │                             CORE SETTINGS                                 │
# └──────────────────────────────────────────────────────────────────────────┘

# Primary prefix key - Used by active multilevel sessions
unbind $primary_prefix
set -g prefix $primary_prefix
bind $primary_prefix send-prefix

# Base window indexing starts at 1 (more intuitive)
set -g base-index 1

# Terminal color support
set-option -g default-terminal screen-256color

# Disable repeat time - allow the arrow key to be used immediately after changing windows
set-option -g repeat-time 0

# Disable assume-paste-time so that iTerm2's "Send Hex Codes" feature works
# with tmux 2.1. This is backwards-compatible with earlier versions of tmux.
set-option -g assume-paste-time 0

# Default shell command
set-option -g default-command "\$SHELL"

# Store tmux version for compatibility checks
run-shell "tmux setenv -g TMUX_VERSION \$(tmux -V | cut -c 6-)"

# ┌──────────────────────────────────────────────────────────────────────────┐
# │                    DELIGHTFUL MULTILEVEL NAVIGATION                       │
# │                         9-Level Tmux System                               │
# └──────────────────────────────────────────────────────────────────────────┘
#
# QUICK REFERENCE:
#   • Direct jumps: $primary_prefix then !@#\$%^&*(  → Jump to Levels 1-9
#   • Sequential:   Ctrl+V (down level), Ctrl+B (up level)  
#   • Emergency:    $primary_prefix !  → Reset to Level 1
#   • Help:         Run \`tmux-level-help\` for current level info
#
# STATUS BAR FORMATS:
#   --visual:   [L3:${primary_prefix#C-} ●●●○○○○○○]  ← Current default
#   --compact:  [L3:${primary_prefix#C-}]
#   --full:     [L3:$primary_prefix] 
#   --minimal:  [3]

# Initialize multilevel tracking variables
set -g @current_level 1
set -g @max_levels 9

# Direct level jumps using $primary_prefix followed by Shift+1-9 (!@#\$%^&*()
bind ! run-shell '~/.local/bin/tmux-multilevel/core/tmux-goto-level 1'
bind @ run-shell '~/.local/bin/tmux-multilevel/core/tmux-goto-level 2'
bind '#' run-shell '~/.local/bin/tmux-multilevel/core/tmux-goto-level 3'
bind '\$' run-shell '~/.local/bin/tmux-multilevel/core/tmux-goto-level 4'
bind % run-shell '~/.local/bin/tmux-multilevel/core/tmux-goto-level 5'
bind '^' run-shell '~/.local/bin/tmux-multilevel/core/tmux-goto-level 6'
bind '&' run-shell '~/.local/bin/tmux-multilevel/core/tmux-goto-level 7'
bind '*' run-shell '~/.local/bin/tmux-multilevel/core/tmux-goto-level 8'
bind '(' run-shell '~/.local/bin/tmux-multilevel/core/tmux-goto-level 9'

# Sequential navigation bindings
# Ctrl+V = go down one level, Ctrl+B = go up one level (with wraparound)
bind -T root C-v run-shell "\$HOME/.local/bin/tmux-multilevel/core/tmux-level-down"
bind -T root C-b run-shell "\$HOME/.local/bin/tmux-multilevel/core/tmux-level-up"

# Off key-table bindings (for passthrough sessions)
# These allow navigation even when session is in passthrough mode
bind -T off C-v run-shell "\$HOME/.local/bin/tmux-multilevel/core/tmux-level-down"
bind -T off C-b run-shell "\$HOME/.local/bin/tmux-multilevel/core/tmux-level-up"

# Session persistence hook - restores level state on new sessions
set-hook -g session-created 'run-shell "
if [ -f ~/.tmux_level_state ]; then
    level=\$(cat ~/.tmux_level_state 2>/dev/null || echo 1)
    ~/.local/bin/tmux-multilevel/core/tmux-goto-level \$level 2>/dev/null || ~/.local/bin/tmux-multilevel/core/tmux-level-reset
fi"'

# ┌──────────────────────────────────────────────────────────────────────────┐
# │                         WINDOW MANAGEMENT                                 │
# └──────────────────────────────────────────────────────────────────────────┘

# Window navigation
bind-key space next-window
bind-key bspace previous-window
bind-key a next-window
bind-key A previous-window
bind-key enter next-layout

# Window creation and selection
bind-key c new-window
bind-key t choose-tree -Zs

# Quick config reload
bind-key R source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."

# Command prompt and utilities
bind-key : command-prompt
bind-key r refresh-client
bind-key L clear-history
bind-key q display-panes

# Display panes timeout
set-window-option -g display-panes-time 1500

# ┌──────────────────────────────────────────────────────────────────────────┐
# │                          PANE MANAGEMENT                                  │
# └──────────────────────────────────────────────────────────────────────────┘

# Vim-style pane creation (preserve current path)
bind-key v split-window -h -c "#{pane_current_path}"
bind-key s split-window -v -c "#{pane_current_path}"

# Vim-style pane navigation
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# Quick pane switching
bind-key ' ' last-pane

# Layout management
bind-key H select-layout even-horizontal
bind-key V select-layout even-vertical
bind-key + select-layout main-horizontal
bind-key = select-layout main-vertical
bind-key C-o rotate-window

# Synchronize panes toggle (Shift+S)
bind-key S setw synchronize-panes \; display-message "Pane sync: #{?pane_synchronized,ON,OFF}"

# Main pane dimensions for main-horizontal/vertical layouts
set-window-option -g other-pane-height 25
set-window-option -g other-pane-width 80

# Smart pane switching with vim awareness
# Seamlessly navigate between vim splits and tmux panes
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim\$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim\$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim\$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim\$' && tmux send-keys C-l) || tmux select-pane -R"
bind -n 'C-\' run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim\$' && tmux send-keys 'C-\\') || tmux select-pane -l"
bind C-l send-keys 'C-l'

# Force immediate reflow when panes are resized
set -g aggressive-resize on

# ┌──────────────────────────────────────────────────────────────────────────┐
# │                        COPY MODE & CLIPBOARD                              │
# └──────────────────────────────────────────────────────────────────────────┘

# Vi-style copy mode
setw -g mode-keys vi

# Enter copy mode with 'x', paste with 'p'
bind-key x copy-mode
bind-key p paste-buffer

# Vi-style selection and copy (macOS pbcopy integration)
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"

# Mouse drag to copy
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

# Rectangle selection (Ctrl+R in copy mode, avoiding conflict with Ctrl+V)
bind-key -T copy-mode-vi C-r send-keys -X rectangle-toggle

# ┌──────────────────────────────────────────────────────────────────────────┐
# │                         STATUS BAR & APPEARANCE                           │
# └──────────────────────────────────────────────────────────────────────────┘

# Status bar configuration
set-option -g status-interval 1
set-option -g status-left ''

# Multilevel navigation status with visual indicator
# Shows: [L3:${primary_prefix#C-} ●●●○○○○○○] format with color coding
# Run \`tmux-level-status --help\` for format options
set-option -g status-right "#(~/.local/bin/tmux-multilevel/core/tmux-level-status --visual) #{?client_prefix,[ACTIVE],} | %l:%M%p"

# Window status styling
set-window-option -g window-status-current-style fg=magenta
set-option -g status-style fg=default

# Color scheme: Solarized Dark (default)
set-option -g status-style bg=black
set-option -g pane-active-border-style fg=colour215,bold
set-option -g pane-border-style fg=colour238

# Color scheme: Solarized Light (auto-detect based on terminal)
if-shell "[ \"\$COLORFGBG\" = \"11;15\" ]" "set-option -g status-style bg=white"
if-shell "[ \"\$COLORFGBG\" = \"11;15\" ]" "set-option -g pane-active-border-style fg=colour215,bold"
if-shell "[ \"\$COLORFGBG\" = \"11;15\" ]" "set-option -g pane-border-style fg=colour250"

# Window activity notifications
setw -g monitor-activity on
set -g visual-activity on

# ┌──────────────────────────────────────────────────────────────────────────┐
# │                            MOUSE SUPPORT                                  │
# └──────────────────────────────────────────────────────────────────────────┘

# Enable mouse support for pane selection, resizing, and scrolling
set -g mouse on

# Fix to allow mousewheel/trackpad scrolling in tmux 2.1
bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"

# ┌──────────────────────────────────────────────────────────────────────────┐
# │                         MISCELLANEOUS SETTINGS                            │
# └──────────────────────────────────────────────────────────────────────────┘

# Unbind Shift+Enter to prevent accidental pane switching
unbind -n S-Enter

# ╔══════════════════════════════════════════════════════════════════════════╗
# ║                          END OF CONFIGURATION                             ║
# ║                                                                           ║
# ║  For more information:                                                    ║
# ║  • Run: tmux-level-help                                                   ║
# ║  • Visit: https://github.com/WarrenZhu050413/delightful-multilevel-tmux   ║
# ╚══════════════════════════════════════════════════════════════════════════╝
EOF

# Check if ~/.local/bin and subdirectories are in PATH
PATH_WARNING=""
if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    PATH_WARNING="~/.local/bin"
fi

if [[ ":$PATH:" != *":$HOME/.local/bin/tmux-multilevel:"* ]]; then
    if [[ -n "$PATH_WARNING" ]]; then
        PATH_WARNING="$PATH_WARNING and ~/.local/bin/tmux-multilevel"
    else
        PATH_WARNING="~/.local/bin/tmux-multilevel"
    fi
fi

if [[ -n "$PATH_WARNING" ]]; then
    echo ""
    echo "⚠️  $PATH_WARNING not in your PATH"
    echo "   Add this to your ~/.bashrc or ~/.zshrc:"
    echo "   export PATH=\"\$HOME/.local/bin/tmux-multilevel:\$HOME/.local/bin:\$PATH\""
    echo ""
fi

echo ""
echo "✅ Scripts installed successfully!"
echo ""
echo "📋 NEXT STEPS:"
echo "1. 📄 Copy 'tmux.conf.generated' to your ~/.tmux.conf"
echo "   cp tmux.conf.generated ~/.tmux.conf"
echo "2. 🔄 Reload: tmux source-file ~/.tmux.conf"  
echo "3. 🧪 Test: tmux-level-help"
echo ""
echo "🎯 YOUR CONFIGURATION:"
echo "   Primary prefix:   $primary_prefix (active sessions)"
echo "   Secondary prefix: $secondary_prefix (passthrough)"
echo ""
echo "🌳 NEW: Try 'worktree-tmux' for git worktree + multilevel tmux magic!"
echo "   Perfect for parallel development with Claude Code!"
echo ""
echo "🔨 UTILITY TOOLS: Use --help to learn about optional tools like:"
echo "   • worktree-tmux - Git worktree management"
echo "   • claude-resume - Resume Claude sessions easily"
echo ""
echo "📖 See README.md for detailed instructions"
echo "🔧 To change prefixes later, edit ~/.local/bin/tmux-multilevel/config.sh"
echo "   Then re-run this installer to regenerate tmux.conf"
echo ""
echo "🎉 Happy multilevel tmux navigation with $primary_prefix!"